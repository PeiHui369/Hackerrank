@ Revising the Select Query I
Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA.
>>
select * from city where population > 100000 AND countrycode = 'USA';

@ Revising the Select Query II
Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA.
>>
select NAME from city where population > 120000 AND countrycode = 'USA';

@ Select All
Query all columns (attributes) for every row in the CITY table.
>>
SELECT * from city

@ Select By ID
Query all columns for a city in CITY with the ID 1661.
>>
SELECT * from city where ID = '1661';

@ Japanese Cities' Attributes
Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.
>>
SELECT * from city where countrycode = 'JPN';

@ Japanese Cities' Names
Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.
>>
SELECT NAME from city where countrycode ='JPN';

@ Weather Observation Station 1
Query a list of CITY and STATE from the STATION table.
>>
SELECT CITY, STATE from station

@
Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.
>>
SELECT DISTINCT CITY FROM STATION WHERE MOD(ID,2)=0;

@
Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.
>>
select count(city)- count(DISTINCT city) from station;

@
Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.
>>
SELECT CITY, LENGTH(CITY) FROM STATION ORDER BY LENGTH(CITY), CITY LIMIT 1; 
SELECT CITY, LENGTH(CITY) FROM STATION ORDER BY LENGTH(CITY) DESC, CITY LIMIT 1;

@
Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.
>>
SELECT CITY FROM STATION WHERE CITY REGEXP '^[aeiou]';

@
Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.
>>
SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP '[AEIOU]$';

@
Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.
>>
SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP '[AEIOU]$' AND CITY REGEXP '^[AEIOU]';

@
Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.
>>
select distinct city from station where NOT city REGEXP '^[A,E,I,O,U]';

@
Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.
>>

@
Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.
>>
SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP '^[^aeiou]' or CITY REGEXP '[^aeiou]$'

@
Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.
>>
SELECT DISTINCT CITY FROM STATION WHERE CITY not regexp '^[aeiou]|[aeiou]$';

@
Query the Name of any student in STUDENTS who scored higher than 75 Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.
>>
select name from students where marks > 75 order by SUBSTR(name, -3), ID;

@
Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.
>>
select name from employee order by name;

@ 
Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than $2000 per month who have been employees for less than 10 months. Sort your result by ascending employee_id.
>>
select name from employee where salary > 2000 AND months < 10 order by employee_id;

@ ?
The total score of a hacker is the sum of their maximum scores for all of the challenges. Write a query to print the hacker_id, name, and total score of the hackers ordered by the descending score. If more than one hacker achieved the same total score, then sort the result by ascending hacker_id. Exclude all hackers with a total score of 0 from your result.
>>
SELECT hacker_id, name, SUM(max_score) AS total_score 
FROM (
    SELECT h.hacker_id, h.name, s.challenge_id, MAX(s.score) AS max_score 
    FROM Hackers AS h 
    JOIN Submissions AS s ON h.hacker_id = s.hacker_id 
    GROUP BY h.hacker_id, h.name, s.challenge_id
) AS s 
GROUP BY hacker_id, name 
HAVING total_score > 0 
ORDER BY total_score DESC, hacker_id;

@
Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than 38.7880 and less than 137.2345. Truncate your answer to 4 decimal places.
>>
SELECT ROUND(SUM(LAT_N),4) FROM STATION WHERE LAT_N BETWEEN 38.7880 and 137.2345;

@
Query the greatest value of the Northern Latitudes (LAT_N) from STATION that is less than 137.2345 . Truncate your answer to  decimal places.
>>
SELECT ROUND(MAX(LAT_N),4) FROM STATION WHERE LAT_N < 137.2345;

@
Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than 137.2345. Round your answer to 4 decimal places.
>>
SELECT ROUND(LONG_W,4) from station where LAT_N=(SELECT MAX(LAT_N) FROM STATION WHERE LAT_N < 137.2345)

@
Query the smallest Northern Latitude (LAT_N) from STATION that is greater than 38.7780. Round your answer to 4 decimal places.
>>
SELECT ROUND(MIN(LAT_N),4) FROM STATION WHERE LAT_N > 38.7780;

@
Query the Western Longitude (LONG_W)where the smallest Northern Latitude (LAT_N) in STATION is greater than 38.7780 . Round your answer to 4 decimal places.
>>
SELECT ROUND(LONG_W, 4) FROM STATION WHERE LAT_N=(SELECT MIN(LAT_N) FROM STATION WHERE LAT_N > 38.7780);

@ 
Manhattan distance between P1 (a,b) and P2 (c,d) //c,d for MAX; a,b for MIN
>>
SELECT ROUND((MAX(LAT_N) + MAX(LONG_W)) - (MIN(LAT_N) + MIN(LONG_W)), 4) FROM STATION;

@
Consider P1(a,c) and P2(b,d) to be two points on a 2D plane where (a,b) are the respective minimum and maximum values of Northern Latitude (LAT_N) and (c,d) are the respective minimum and maximum values of Western Longitude (LONG_W) in STATION.
Query the Euclidean Distance between points P1 and P2 and format your answer to display  decimal digits.
>>
select round(sqrt(power((Max(LAT_N)-Min(LAT_N)),2) + power((Max(LONG_W)-Min(LONG_W)),2)),4) from station;

@
A median is defined as a number separating the higher half of a data set from the lower half. Query the median of the Northern Latitudes (LAT_N) from STATION and round your answer to  decimal places.
>>
SELECT ROUND(LAT_N, 4)
FROM (
  SELECT LAT_N, ROW_NUMBER() OVER (ORDER BY LAT_N) AS RowAsc,
         ROW_NUMBER() OVER (ORDER BY LAT_N DESC) AS RowDesc
  FROM STATION
) t
WHERE RowAsc = RowDesc OR RowAsc + 1 = RowDesc OR RowAsc = RowDesc + 1;

@
You are given a table, BST, containing two columns: N and P, where N represents the value of a node in Binary Tree, and P is the parent of N.
Write a query to find the node type of Binary Tree ordered by the value of the node. Output one of the following for each node:
Root: If node is root node.
Leaf: If node is leaf node.
Inner: If node is neither root nor leaf node.
>>
SELECT N, CASE WHEN P IS NULL 
THEN 'Root' WHEN N NOT IN (SELECT DISTINCT P FROM BST WHERE P IS NOT NULL) 
THEN 'Leaf' ELSE 'Inner' END AS NodeType FROM BST ORDER BY N;

@
Amber's conglomerate corporation just acquired some new companies. Each of the companies follows this hierarchy:
Founder -> Lead Manager -> Senior Manager -> Manager -> Employee
Given the table schemas below, write a query to print the company_code, founder name, total number of lead managers, total number of senior managers, total number of managers, and total number of employees. Order your output by ascending company_code.
>>
SELECT c.company_code, 
c.founder, 
COUNT(DISTINCT CASE WHEN e.lead_manager_code IS NOT NULL THEN e.lead_manager_code END) AS lead_managers_count, 
COUNT(DISTINCT CASE WHEN e.senior_manager_code IS NOT NULL THEN e.senior_manager_code END) AS senior_managers_count, 
COUNT(DISTINCT CASE WHEN e.manager_code IS NOT NULL THEN e.manager_code END) AS managers_count, 
COUNT(DISTINCT CASE WHEN e.employee_code IS NOT NULL THEN e.employee_code END) AS employees_count 
FROM company c LEFT JOIN employee e ON c.company_code = e.company_code GROUP BY c.company_code, c.founder ORDER BY c.company_code;

@
You are given a table, Functions, containing two columns: X and Y.
Two pairs (X1, Y1) and (X2, Y2) are said to be symmetric pairs if X1 = Y2 and X2 = Y1.
Write a query to output all such symmetric pairs in ascending order by the value of X. List the rows such that X1 â‰¤ Y1.
>>
SELECT T1.X, T1.Y FROM (SELECT X, Y, ROW_NUMBER() OVER (ORDER BY X) RN FROM Functions ) T1 INNER JOIN( SELECT X, Y, ROW_NUMBER() OVER (ORDER BY X) RN FROM Functions ) T2 ON T1.RN < T2.RN WHERE T1.X = T2.Y AND T1.Y = T2.X;

@
Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:
Equilateral: It's a triangle with  sides of equal length.
Isosceles: It's a triangle with  sides of equal length.
Scalene: It's a triangle with  sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle.
>>
SELECT CASE 
WHEN (A + B <= C) OR (B + C <= A) OR (A + C <= B) THEN 'Not A Triangle' 
WHEN (A = B) AND (B = C) THEN 'Equilateral' 
WHEN ((A = B) &(A != C)) OR ((B = C) &(B != A)) OR ((A = C) &(A != B)) THEN 'Isosceles' 
WHEN (A != B) AND (B != C) AND (A != C) THEN 'Scalene' 
END AS Triangle_Type FROM TRIANGLES;

@
Generate the following two result sets:

Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format:
There are a total of [occupation_count] [occupation]s.
where [occupation_count] is the number of occurrences of an occupation in OCCUPATIONS and [occupation] is the lowercase occupation name. If more than one Occupation has the same [occupation_count], they should be ordered alphabetically.

===
Query : SELECT () from {tablename}
- all columns : *
